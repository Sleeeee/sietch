using Gtk 4.0;
using AstalNetwork 0.1;

template $Network : Box {
  Overlay {
    child: $CircularProgress network_progress {
      percentage: bind template.adjustment as <Gtk.Adjustment>.value;
    };

    [overlay]
    Image network_icon {
      icon-name: bind template.wifi as <AstalNetwork.Wifi>.icon-name;
      halign: center;
    }
  }

  Popover network_popover {
    width-request: 300;
    position: right;
    autohide: true;

    Box {
      orientation: vertical;

      Box {
        Label {
	  label: "Network";
	  halign: center;
	  hexpand: true;
        }
        styles ["popover-title"]
      }

      // First content block
      Box {
        orientation: vertical;

        // Status row
        Box {
	  homogeneous: true;

          Label {
	    label: "Status";
	    halign: start;
	  }
	  Label {
	    label: bind $get_status_label(template.wifi as <AstalNetwork.Wifi>.state) as <string>;
	    halign: end;
	  }
        }

        // Active network row
        Box {
	  homogeneous: true;

	  Label {
	    label: "Active network";
	    halign: start;
	  }
	  Label {
	    label: bind template.wifi as <AstalNetwork.Wifi>.active-access-point as <AstalNetwork.AccessPoint>.ssid;
	    halign: end;
	  }
        }

        // IPv4 row
        Box {
	  homogeneous: true;

	  Label {
	    label: "IPv4";
	    halign: start;
	  }
	  Label ipv4_label {
            label: "Not assigned";
            halign: end;
          }
        }

        // IPv6 row
        Box {
	  spacing: 5;

	  Label {
	    label: "IPv6";
	    halign: start;
	  }
	  Label ipv6_label {
            label: "Not assigned";
            halign: end;
            styles ["text-sm"]
          }
        }
      }

      // Second content block
      Box {
	orientation: vertical;

        ScrolledWindow {
	  propagate-natural-height: true;
          hscrollbar-policy: never;
          vscrollbar-policy: automatic;

          Box access_points_container {
            orientation: vertical;
          }
        }
      }
      styles ["popover-menu"]
    }
    styles ["network-popover"]
  }

  GestureClick {
    pressed => $toggle_popover();
  }
}
